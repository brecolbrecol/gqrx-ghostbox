#!/usr/bin/env perl

################################################################################
# gqrx-ghostbox -  Utility for EVP/ghost box style radio scanning with GQRX
# Copyright (c) 2016, Douglas Haber
# All rights reserved
################################################################################
# For more information about this program and its usage, or to find the
# most recevent version, please go to:
#    http://github.com/DougHaber/gqrx-ghostbox
#
################################################################################
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#     * The names names of the authors may not be used to endorse or
#       promote products derived from this software without specific
#       prior written permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND ITS
# CONTRIBUTERS ''AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR ITS
# CONTRIBUTERS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
# USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
# OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
################################################################################

use warnings;
use strict;

use GQRX::Remote;

{
    # This module has been inlined to keep packaging simple.  If the application
    # grows, it should be broken apart.
    package Ghostbox;

    use Time::HiRes qw(usleep);
    use Getopt::Long qw(:config no_ignore_case);

    use warnings;
    use strict;

    ################################################################################
    # Interface
    ################################################################################

    sub new {
    	my $class = shift();
    	my $self = {
	    remote    => undef,  # GQRX::Remote object
	    options   => undef,  # Runtime options
	    frequency => undef,  # The current scanning frequency
	};

	bless ($self, $class);

	$self->parse_command_line_options();

	return ($self);
}


sub start {
	my ($self) = @_;

	$self->connect_to_gqrx();

	# Setup a random starting frequency within the range
	$self->{frequency} = int(rand($self->{options}->{max_frequency} - $self->{options}->{min_frequency}) +
		$self->{options}->{min_frequency});

	# Set the default demodulator mode
	$self->{remote}->set_demodulator_mode($self->{options}->{demodulator_mode});

	while (1) {
		$self->next_frequency();

		if (! $self->{options}->{quiet_mode}) {
			print "Setting frequency: $self->{frequency}\n";
		}

		usleep($self->{options}->{sleep_time});
	}
}


################################################################################
# Networking
################################################################################

sub connect_to_gqrx {
	my ($self) = @_;

	$self->{remote} = GQRX::Remote->new();

	if (! $self->{remote}->connect(host => $self->{options}->{gqrx_host},
		port => $self->{options}->{gqrx_port})) {
		die "ERROR: Failed to establish connection to Gqrx " .
		"at $self->{options}->{gqrx_host}:$self->{options}->{gqrx_port}\n";
	}
}

sub set_frequency_random
{
	my $self = shift;

	my $frequency_width = $options->{max_frequency} - $options->{min_frequency};
	my $random_freq = int(rand($frequency_width)) + $options->{min_frequency});

	$self->set_frequency($random_freq);
}

sub frequency_step_backward
{
	my $self = shift;
	my ($scanning_step, $min_frequency, $max_frequency, $bounce, $frequency)  = ($options->{scanning_step}, $options->{min_frequency}, $options->{max_frequency}, $options->{bounce}, $self->{frequency});

	my $new_frequency = $frequency - $scanning_step;
	if ($new_frequency < $min_frequency) {
		if ($bounce) {
			$options->{scanning_mode} = 'FORWARD';
			$self->next_frequency();
		}
		else {
			$new_frequency = $new_frequency + $max_frequency - $min_frequency;
		}
	}

	$self->set_frequency( $new_frequency );
}


sub frequency_step_forward
{
	my $self = shift;
	my ($scanning_step, $min_frequency, $max_frequency, $bounce, $frequency)  = ($options->{scanning_step}, $options->{min_frequency}, $options->{max_frequency}, $options->{bounce}, $self->{frequency});

	my $new_frequency = $frequency + $scanning_step;

	if ($new_frequency > $max_frequency) {
		if ($bounce) {
			$options->{scanning_mode} = 'BACKWARD';
			$self->next_frequency();
		}
		else {
			$new_frequency = $new_frequency - $max_frequency + $min_frequency ;
		}
	}

	$self->set_frequency( $new_frequency );
}


sub set_frequency
{
	my $self = shift;
	my $new_freq = shift;

	$self->{frequency} = $new_freq;

	if (! $self->{remote}->set_frequency($new_freq)) {
		die "ERROR: set_frequency() failed: " . $self->{remote}->error() . "\n";
	}
}

################################################################################
# Scanning
################################################################################

sub next_frequency {
	my ($self) = @_;
	my $options = $self->{options};
	my $scanning_mode = $options->{scanning_mode};

	if ($scanning_mode eq 'RANDOM') {
		$self->set_frequency_random();
	}
	elsif ($scanning_mode eq 'BACKWARD') {
		$self->frequency_step_backward();
	}
	else { # Default is 
		$self->frequency_step_forward();
	}
}

sub generate_new_frequency
{
	my ($self) = @_;
	my $options = $self->{options};
}


    ################################################################################
    # Command line parsing
    ################################################################################

sub show_usage {
	# Show the usage help message
	# This accepts an optional $error_message string.  If defined,
	# this is printed before the help as an error message and the exit
	# code is 1.  Otherwise, the exit code will be 0.
	my ($self, $error_message) = @_;

	if ($error_message) {
		print STDERR "ERROR: $error_message\n\n";
	}

	print <<EOF;
	Usage: gqrx-ghostbox [OPTIONS]
	GENERAL:
	-h, --help                          Display this detailed help message
	-q, --quiet                         Quiet mode - only output errors

	CONNECTION:
	-H, --host={IP_ADDRESS}             GQRX Host IP (default is 127.0.0.1)
	-P, --port={PORT}                   GQRX Port (default is 7356)
	-h, --help                          Show this help message

	RADIO SETTINGS:
	-d, --demodulator-mode={MODE}       The GQRX demodulator mode to use
	(default is 'WFM')
	Options: AM, CW, CWL, CWU, FM, LSB, USB,
	WFM, WFM_ST, WFM_ST_OIRT

	SCANNING SETTINGS:
	--min, --min-frequency={FREQUENCY}  Minimum frequency to scan in KHz
	(default is '88000', FM min)
	--max, --max-frequency={FREQUENCY}  Maximum frequency to scan in KHz
	(default is '108000', FM max)
	-m, --scanning-mode={MODE}          Method of scanning
	(default is 'bounce')
	Options: forward, backward, bounce, random
	-s, --scanning-step={STEP_SIZE}     How many KHz to move when scanning
	(default is 150)
	This has no effect in "random" mode
	-S, --sleep={TIME}			Time to hold a frequency for each step
	in ms. (default is '30')
	EOF

	exit ($error_message ? 1 : 0);
}


sub validate_options {
	my ($self) = @_;
	my $options = $self->{options};

	$options->{demodulator_mode} = uc($options->{demodulator_mode});
	$options->{scanning_mode} = uc($options->{scanning_mode});

	if ($options->{gqrx_host} !~ /^(\d{1,3}\.){3}\d{1,3}$/) {
		$self->show_usage("The host must be set to a valid IPv4 address");
	}
	elsif ($options->{demodulator_mode} !~ /^(AM|CW|CWL|CWU|FM|LSB|USB|WFM|WFM_ST|WFM_ST_OIRT)$/) {
		$self->show_usage("Unknown demodulator mode");
	}
	elsif ($options->{scanning_mode} !~ /^(FORWARD|BACKWARD|BOUNCE|RANDOM)$/) {
		$self->show_usage("Unknown scanning mode");
	}
	elsif ($options->{scanning_step} <= 0) {
		$self->show_usage("Scanning step must be greater than 0");
	}
	elsif ($options->{min_frequency} <= 0) {
		$self->show_usage("The minimum frequency must be greater than 0");
	}
	elsif ($options->{max_frequency} <= 0) {
		$self->show_usage("The maximum frequency must be greater than 0");
	}
	elsif ($options->{min_frequency} >= $options->{max_frequency}) {
		$self->show_usage("The minimum frequency must be less than the maximum frequency");
	}
}


sub setup_options {
	my ($self) = @_;
	my $options = $self->{options};

	# Convert the options to the expected value
	$options->{scanning_step} *= 1000;
	$options->{min_frequency} *= 1000;
	$options->{max_frequency} *= 1000;
	$options->{sleep_time} *= 1000;

	# If bounce is enabled, pick a starting direction
	if ($options->{scanning_mode} eq 'BOUNCE') {
		$options->{scanning_mode} = rand() > 0.5 ? 'FORWARD' : 'BACKWARD';
		$options->{bounce} = 1;
	}
}


sub parse_command_line_options {
	my ($self) = @_;
	my %options = (
	bounce => 0,                # Oscillate the scanning mode when true
	demodulator_mode => 'WFM',  # Options: AM, FM, WFM, WFM_ST, WFM_ST_OIRT, LSB, USB, CW, CWL, CWU
	gqrx_host => '127.0.0.1',
	gqrx_port => 7356,
	help => 0,
	max_frequency => 108000,    # Maximum frequency to use in KHz
	min_frequency => 88000,     # Minimum frequency to use in KHz
	quiet_mode => 0,            # When true, only output errors
	scanning_mode => 'bounce',  # Options: forward, backward, bounce, random
	scanning_step => 150,       # The size of each step in KHz for linear scanning
	sleep_time => 30            # Number of ms to wait before changing frequency
	);

	if (! GetOptions(
	"demodulator-mode|d=s" => \$options{demodulator_mode},
	"help|h"               => \$options{help},
	"host|H=s"             => \$options{gqrx_host},
	"max-frequency|max=f"  => \$options{max_frequency},
	"min-frequency|min=f"  => \$options{min_frequency},
	"port|P=s"             => \$options{gqrx_port},
	"quiet|q"              => \$options{quiet_mode},
	"scanning-mode|m=s"    => \$options{scanning_mode},
	"scanning-step|s=f"    => \$options{scanning_step},
	"sleep-time|S=f"       => \$options{sleep_time}
	)) {
		$self->show_usage();
	}

	$self->{options} = \%options;

	if ($options{help}) {
		$self->show_usage();
	}

	$self->validate_options();
	$self->setup_options();
}
}


################################################################################

sub main {
	my $ghostbox = new Ghostbox();

	$ghostbox->start();
}


main();
